# This GitHub Actions workflow installs several useful tools for CTFs, and
# starts a server so the user can connect and work in the virtual environment.
# This is a pretty safe environment for running random binaries from CTFs, and
# you mostly don't have to worry about fucking anything up since it starts
# fresh every time.
#
# The action also installs some graphical packages. It should be connected to
# via Remote Desktop Protocol (RDP).
#
# Created by Jacob Strieb
# December 2020

name: Run Graphical RDP CTF Environment (Ubuntu GNOME)

# Only run when manually triggered
on:
  workflow_dispatch:
    inputs:
      ngrok_token:
        description: Token to use for ngrok (optional)
        required: false


jobs:
  start_server:
    name: Set up and start the graphical remote CTF server
    runs-on: ubuntu-20.04
    steps:
      - name: Change password
        run: |
          echo "runner:poepjes" | sudo chpasswd

      - name: update apt cache
        run: |
          sudo apt-get update
          # NOTE: upgrading takes way too long, and doesn't seem totally
          # necessary; hence it has been commented out
          # sudo apt-get --yes upgrade

      - name: Install (and upgrade) packages
        run: |
          PACKAGES=(
            binutils
            curl
            wget
            gcc
            tmux
            vim
            nmap
            htop
            gdb
            build-essential
            xterm
            libcairo2-dev 
            libjpeg-turbo8-dev 
            libpng-dev 
            libtool-bin 
            libossp-uuid-dev 
            freerdp2-dev 
            libpango1.0-dev 
            libssh2-1-dev 
            libssl-dev
          )
          sudo apt-get --yes install ${PACKAGES[@]}

      - name: setup pip 
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python3 -m pip install --upgrade pip setuptools wheel

      - name: install pip tools
        run: |
          PIP_PACKAGES=(
            pwntools
            ciphey
          )
          python3 -m pip install --upgrade ${PIP_PACKAGES[@]}

      - name: Install (and upgrade) graphical packages
        run: |
          PACKAGES=(
            kde-plasma-desktop
          )
          sudo apt-get --yes install ${PACKAGES[@]}

      - name: start displaymanager after install
        run: |
          sudo systemctl enable --now sddm

      - uses: actions/checkout@v2
      - name: Move checked out repository to ~/repo
        run: |
          cd
          mv "$GITHUB_WORKSPACE" ~/repo

          # Re-create the workspace directory, otherwise subsequent steps start
          # in a folder that doesn't exist and immediately fail
          mkdir --parents "$GITHUB_WORKSPACE"

      - name: Install dotfiles
        run: |
          cd ~/repo/dotfiles
          bash install.sh

          cp ./ttyd_run.sh ~/ttyd_run.sh
          cp ./ngrok.yml ~/ngrok.yml

          # Add a command to kill the action by killing the "sleep" process
          echo 'alias quit="pkill sleep"' >> ~/.bashrc

      - name: Install RDP server
        run: |
          sudo apt --yes install xrdp
          sudo systemctl enable --now xrdp

      - name: Install Apache Guacamole
        run: |
          # Install Apache Guacamole server
          cd
          wget \
            --quiet \
            --output-document "guacamole-server-1.3.0.tar.gz" \
            "http://apache.org/dyn/closer.cgi?action=download&filename=guacamole/1.3.0/source/guacamole-server-1.3.0.tar.gz"
          tar -xzf guacamole-server-1.3.0.tar.gz
          cd guacamole-server-1.3.0
          ./configure
          make
          sudo make install
          sudo ldconfig

          # Install Apache guacamole authentication
          cd
          sudo mkdir -p /etc/guacamole
          echo '
          <user-mapping>
              <authorize username="runner" password="poepjes">
                  <protocol>rdp</protocol>
                  <param name="hostname">localhost</param>
                  <param name="port">3389</param>
                  <param name="password">poepjes</param>
              </authorize>
          </user-mapping>
          ' | sudo tee /etc/guacamole/user-mapping.xml
          guacd

          # Install Apache Tomcat to run Guacamole with, and Guacamole client
          sudo apt-get install \
            tomcat9 \
            default-jdk
          sudo wget \
            --quiet \
            --output-document "/var/lib/tomcat9/webapps/guacamole-1.3.0.war" \
            "http://apache.org/dyn/closer.cgi?action=download&filename=guacamole/1.3.0/binary/guacamole-1.3.0.war"
          sudo service tomcat9 restart || sudo service tomcat9 start

      - name: Install ngrok and run in the background as a daemon
        run: |
          # Only proceed if there is a user-supplied authtoken for ngrok.
          # Prefer one submitted with a workflow dispatch, but accept one
          # stored as a repository secret.
          NGROK_AUTHTOKEN="${{ github.event.inputs.ngrok_token }}"
          if [ -z "$NGROK_AUTHTOKEN" ]; then
            NGROK_AUTHTOKEN="${{ secrets.NGROK_TOKEN }}"
          fi
          if [ -z "$NGROK_AUTHTOKEN" ]; then
            echo ngrok authtoken required!
            exit 1
          fi

          # Add the authtoken to the ngrok configuration file
          echo "authtoken: $NGROK_AUTHTOKEN" >> ~/ngrok.yml

          # Download and install ngrok
          cd
          wget \
            --quiet \
            --output-document ngrok.zip \
            "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip"
          unzip ngrok.zip
          sudo mv ngrok /usr/local/bin/ngrok
          touch ~/ngrok.log

          # Run ngrok in the background as a daemon
          start-stop-daemon \
            --start \
            --background \
            --chdir ~/repo \
            --exec /usr/local/bin/ngrok \
            -- \
              start \
              -config ~/ngrok.yml \
              rdp guac

      - name: Display connection information
        run: |
          echo Waiting for things to start up...
          sleep 20s

          echo
          echo When connecting, use username "'runner'" and password "'ctf'"
          echo

          # Print ngrok connection info (if applicable)
          NGROK_AUTHTOKEN="${{ github.event.inputs.ngrok_token }}"
          if [ -z "$NGROK_AUTHTOKEN" ]; then
            NGROK_AUTHTOKEN="${{ secrets.NGROK_TOKEN }}"
          fi
          if [ -n "$NGROK_AUTHTOKEN" ]; then
            echo "To connect using an RDP client:"
            cat ~/ngrok.log \
              | jq .url \
              | grep -v "null" \
              | tr -d '"' \
              | sed 's/tcp:\/\/\(.*\)/\1/g' \
              | sed 's/^http\(.*\)/http\1\/guacamole-1.3.0/g' \
              | sort
          fi


      - name: Display connection information
        run: |
          echo 6h left"
          # Wait... This process will be killed to end the Action. Return a
          # non-failure exit code in any case so that there are no unnecessary
          # notifications about a failed Actions workflow.
          sleep 6h || true


      - name: Clean up
        run: |
          echo Done!
